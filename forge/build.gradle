plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'org.jetbrains.kotlin.jvm' version "1.7.10"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:${mappings_channel}-${mappings_version}@zip")
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
    modImplementation "curse.maven:kotlin-forge-351264:${kotlin_forge_file}"
    modImplementation "com.cobblemon:forge:${cobblemon_file}"
    modImplementation "curse.maven:jade-forge-324717:${jade_forge_file}"
    modImplementation "curse.maven:jei-forge-238222:${jei_forge_file}"
}

def replaceProperties = [mod_id                 : mod_id,
                         mod_name               : mod_name,
                         mod_version            : mod_version,
                         mod_authors            : mod_authors,
                         mod_description        : mod_description,
                         minecraft_version_range: minecraft_version_range,
                         forge_version_range    : forge_version_range,
                         loader_version_range   : loader_version_range]

processResources {
    inputs.properties replaceProperties

    filesMatching("META-INF/mods.toml") {
        expand replaceProperties
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}