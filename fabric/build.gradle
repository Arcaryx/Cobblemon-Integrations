plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'org.jetbrains.kotlin.jvm' version "1.7.10"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:${mappings_channel}-${mappings_version}@zip")
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    modImplementation "com.cobblemon:fabric:${cobblemon_file}"
    modImplementation "curse.maven:jade-fabric-324717:${jade_fabric_file}"
    modImplementation "curse.maven:jei-fabric-238222:${jei_fabric_file}"
}


def replaceProperties = [mod_id          : mod_id,
                         mod_name        : mod_name,
                         mod_version     : mod_version,
                         mod_authors     : mod_authors,
                         mod_description : mod_description,
                         mod_base_package: mod_base_package,
                         minecraft_version: minecraft_version,
                         fabric_version  : fabric_api_version,
                         loader_version  : fabric_loader_version]

processResources {
    inputs.properties replaceProperties

    filesMatching("fabric.mod.json") {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}